<?php

namespace BackendBundle\Entity\Repository;
/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllProductsInAssocArray()
    {
        $query = $this->createQueryBuilder('p')
            ->select('partial p.{title, vendorCode, id}')
            ->orderBy('p.title', 'ASC')
            ->indexBy('p','p.title')
            ->getQuery()
            ->getArrayResult();
        return $query;
    }


    public function getAllProductsForFrontendLimitBy($lim = 1000)
    {
        $query = $this->createQueryBuilder('p')
            ->where('p.price IS NOT NULL')
            ->andWhere('p.quantity != :quant')
            ->setParameter('quant', 0)
            ->orderBy('p.createdAt', 'DESC')
            ->addOrderBy('p.quantity', 'DESC')
            ->setMaxResults($lim)
            ->getQuery();
        return $query->getResult();
    }
    public function getAllProductsByCategories($arr,$lim = 1000)
    {
        $qb = $this->createQueryBuilder('p');
        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.categories', 'c')
            ->where($qb->expr()->in('c.id', ':arr'))
            ->andWhere('p.quantity != :quant')
            ->setParameter('quant', 0)
            ->addOrderBy('p.createdAt', 'DESC')
            ->addOrderBy('p.quantity', 'DESC')
            ->setParameter('arr', $arr)
            ->setMaxResults($lim)
            ->getQuery()
            ->getResult();
        return $query;
    }
    public function getProductsByIdsAndSlugs(array $ids,array $slugs,$lim = 1000)
    {
        return $this->createQueryBuilder('p')
            ->where('p.image IS NOT NULL')
            ->andWhere("p.id IN(:ids)")
            ->andWhere("p.slug IN(:slugs)")
            ->setParameter('ids', array_values($ids))
            ->setParameter('slugs', array_values($slugs))
            ->orderBy('p.createdAt', 'DESC')
            ->setMaxResults($lim)
            ->getQuery()
            ->getResult()
            ;
    }
    public function getSimilarProducts($category,$count)
    {
        $arr[]= $category;
        $qb = $this->createQueryBuilder('p');
        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.categories', 'c')
            ->where($qb->expr()->in('c.id', ':arr'))
            ->addSelect('RAND() as HIDDEN rand')
            ->addOrderBy('rand')
            ->setMaxResults($count)
            ->setParameter('arr', $arr)
            ->getQuery()
            ->getResult();
        return $query;
    }

    public function search($searchText,$lim = 1000)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.title LIKE :searchText')
            ->orWhere('p.title LIKE :searchText2')
            ->orWhere('p.artikul LIKE :searchText')
            ->orWhere('p.artikul LIKE :searchText2')
            ->setParameter('searchText', '%'.$searchText.'%')
            ->setParameter('searchText2', $searchText.'%')
            ->orderBy('p.quantity', 'DESC')
            ->setMaxResults($lim)
            ->getQuery()
            ->getResult();
    }


    public function getAllProductsForDeleting($lim = 1000)
    {
        $query = $this->createQueryBuilder('p')
            ->where('p.quantity = :quant')
            ->setParameter('quant', 0)
            ->setMaxResults($lim)
            ->getQuery()
            ->getResult();
        return $query;
    }
}
