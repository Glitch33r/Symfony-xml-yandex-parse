<?php

namespace BackendBundle\Entity\Repository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{

    public function getCategoryByName($value)
    {
        $query = $this->createQueryBuilder('a')
            ->where('a.title = ?1')
            ->indexBy('a','a.title')
            ->setParameter(1, $value)
            ->getQuery()
            ->getResult();

        return $query;
    }
    public function getCategoryTreeSelect($id = null)
    {

        if($id)
        {
            $db =$this->createQueryBuilder('c');
            $notArr = array();
            $parentCategory = $this->find($id);

            $this->getChildren($parentCategory, $notArr);


            $result = $db
                ->orderBy('c.treeTitle')
                ->where($db->expr()->notIn('c.id', $notArr))
            ;
//            echo $result->getQuery()->getSQL() . '<br />';

            return $result;
        }
        else
        {
            return $this->createQueryBuilder('c')
                ->orderBy('c.treeTitle')
                ;
        }
    }

    public function getAll()
    {
        return $this->createQueryBuilder('c')
            ->orderBy('c.title', 'ASC')
            ->getQuery()
            ->getArrayResult();
    }
    public function getCategoryProductSelect()
    {
        $db =$this->createQueryBuilder('c');
        $categoriesArr = array();

        return $this->createQueryBuilder('c')
            ->orderBy('c.treeTitle')
            ;
    }
    public function getAllSortedByTitle()
    {
        $query = $this->createQueryBuilder('t')
            ->orderBy('t.title', 'ASC')
            ->getQuery();
        return $query;
    }
    public function getAllCategoriesInAssocArray()
    {
        $query = $this->createQueryBuilder('c')
            ->orderBy('c.title', 'ASC')
            ->indexBy('c','c.title')
            ->getQuery()
            ->getResult();
//            ->getArrayResult();
        //            ->select('partial c.{id,title}')
        return $query;
    }

    public function getAllChildrenEntityCategories($parentCategory)
    {
        $arr = [];
        $this->getChildrenEntities($parentCategory, $arr);
        return $arr;
    }
    public function getGlobalParents()
    {
        return $this->createQueryBuilder('c')
            ->where('c.treeTitle NOT LIKE :separator')
            ->setParameter('separator', '%>%')
            ->getQuery()
            ->getResult();
    }
    public function getSomeCategories($arr)
    {
        $qb = $this->createQueryBuilder('c');
        $query = $this->createQueryBuilder('c')
            ->where($qb->expr()->in('c.linkName', ':arr'))
            ->setParameter('arr', $arr)
            ->getQuery()
            ->getResult();
        return $query;
    }


    public  function getCategoryIdByName($value)
    {
        $query  = $this->createQueryBuilder('e')
            ->select('e.id')
            ->where('e.title = :title')
            ->setParameter('title', $value)
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function setCategoryParent($parent, $title)
    {
        $this->createQueryBuilder('u')
            ->update('BackendBundle:Category', 'u')
            ->set('u.parent', '?1')
            ->where('u.title = ?2')
            ->setParameter(1, $parent)
            ->setParameter(2, $title)
            ->getQuery()
            ->execute();
    }
}
